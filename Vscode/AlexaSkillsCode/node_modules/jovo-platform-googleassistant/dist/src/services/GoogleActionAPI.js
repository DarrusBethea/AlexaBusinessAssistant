"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const https = require("https");
const GoogleActionAPIResponse_1 = require("./GoogleActionAPIResponse");
const GoogleActionAPIError_1 = require("./GoogleActionAPIError");
class GoogleActionAPI {
    static async apiCall(options) {
        return new Promise((resolve, reject) => {
            const opt = {
                hostname: options.endpoint.substr(8),
                port: 443,
                path: options.path,
                method: options.method ? options.method : 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + options.permissionToken,
                },
            };
            let postData;
            if (options.json) {
                postData = JSON.stringify(options.json);
                if (!opt.headers) {
                    opt.headers = {};
                }
                opt.headers['Accept'] = 'application/json';
                opt.headers['Content-Length'] = Buffer.byteLength(postData);
            }
            const req = https
                .request(opt, (res) => {
                res.setEncoding('utf8');
                let rawData = '';
                res.on('data', (chunk) => {
                    rawData += chunk;
                });
                res.on('end', () => {
                    let parsedData;
                    if (res.statusCode === 204) {
                        resolve(new GoogleActionAPIResponse_1.GoogleActionAPIResponse(res.statusCode, {}));
                        return;
                    }
                    try {
                        if (rawData.length > 0) {
                            parsedData = JSON.parse(rawData);
                            return resolve(new GoogleActionAPIResponse_1.GoogleActionAPIResponse(res.statusCode, parsedData));
                        }
                    }
                    catch (e) {
                        return reject(new GoogleActionAPIError_1.GoogleActionAPIError(e.message || 'Something went wrong', e.code || GoogleActionAPIError_1.GoogleActionAPIError.PARSE_ERROR));
                    }
                    resolve(new GoogleActionAPIResponse_1.GoogleActionAPIResponse(res.statusCode, {}));
                });
            })
                .on('error', (e) => {
                reject(e);
            });
            if (postData) {
                req.write(postData);
            }
            req.end();
        });
    }
}
exports.GoogleActionAPI = GoogleActionAPI;
//# sourceMappingURL=GoogleActionAPI.js.map