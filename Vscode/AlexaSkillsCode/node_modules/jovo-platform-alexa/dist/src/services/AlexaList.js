"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ApiError_1 = require("./ApiError");
const AlexaAPI_1 = require("./AlexaAPI");
class AlexaList {
    constructor(apiEndpoint, apiAccessToken) {
        this.apiEndpoint = apiEndpoint;
        this.apiAccessToken = apiAccessToken;
    }
    /**
     * Returns list by name and status
     * @param {string} name
     * @param {'active'|'completed'} listState
     * @return {Promise}
     */
    async getList(name, listState = 'active') {
        try {
            const lists = (await this.getHouseHoldLists());
            for (const list of lists.lists) {
                if (list.name === name && list.state === listState) {
                    return await this.getListAPI(`${list.listId}/${list.state}`);
                }
            }
            return Promise.resolve({});
        }
        catch (e) {
            return Promise.reject(e);
        }
    }
    /**
     * Adds item to list
     * @param {string} listName
     * @param {string} value
     * @param {string} status
     * @return {Promise}
     */
    async addToList(listName, value, status = 'active') {
        const list = (await this.getList(listName));
        return await this.createListItemAPI(list.listId, {
            value,
            status,
        });
    }
    /**
     * Updates item in list by old value (be careful with items with same name)
     * Use updateListItem to update by ids
     * @param {'Alexa shopping list'|'Alexa to-do list'} listName
     * @param {string} oldValue
     * @param {string} newValue
     * @param {'active'|'completed'} newStatus
     * @return {*}
     */
    async updateList(listName, oldValue, newValue, newStatus) {
        const list = (await this.getList(listName));
        for (const listItem of list.items || []) {
            if (listItem.value.toLowerCase() === oldValue.toLowerCase()) {
                return this.updateListItemAPI(list.listId, {
                    id: listItem.id,
                    status: newStatus,
                    value: newValue,
                    version: listItem.version,
                });
            }
        }
        return Promise.reject(new ApiError_1.ApiError('No items with this value found.', ApiError_1.ApiError.ITEM_NOT_FOUND));
    }
    async deleteListItem(listName, value, listState = 'active') {
        const list = (await this.getList(listName, listState));
        for (const listItem of list.items || []) {
            if (listItem.value.toLowerCase() === value.toLowerCase() && listItem.id) {
                return this.deleteListItemAPI(list.listId, listItem.id);
            }
        }
        return Promise.reject(new ApiError_1.ApiError('No items with this value found.', ApiError_1.ApiError.ITEM_NOT_FOUND));
    }
    /**
     * Return all household lists
     * @return {*}
     */
    getHouseHoldLists() {
        return this.getListAPI();
    }
    async deleteListItemAPI(listId, itemId) {
        const options = {
            endpoint: this.apiEndpoint,
            path: `/v2/householdlists/${listId}/items/${itemId}`,
            method: 'DELETE',
            permissionToken: this.apiAccessToken,
        };
        try {
            const response = await AlexaAPI_1.AlexaAPI.apiCall(options); // tslint:disable-line
            if (response.httpStatus === 403) {
                const apiError = new ApiError_1.ApiError(response.data.message, response.data.code);
                if (response.data.Message === 'Not all permissions are authorized.') {
                    apiError.code = ApiError_1.ApiError.NO_USER_PERMISSION; // user needs to grant access in app
                }
                if (response.data.Message === 'Request is not authorized.') {
                    apiError.code = ApiError_1.ApiError.NO_USER_PERMISSION; // user needs to grant access in app
                }
                return Promise.reject(apiError);
            }
            return Promise.resolve(response.data);
        }
        catch (e) {
            return Promise.reject(new ApiError_1.ApiError(e.message || 'Something went wrong.', e.code || ApiError_1.ApiError.ERROR));
        }
    }
    async getListAPI(path = '') {
        // tslint:disable-next-line
        const options = {
            endpoint: this.apiEndpoint,
            path: `/v2/householdlists/${path}`,
            permissionToken: this.apiAccessToken,
        };
        try {
            const response = await AlexaAPI_1.AlexaAPI.apiCall(options); // tslint:disable-line
            if (response.httpStatus === 403) {
                const apiError = new ApiError_1.ApiError(response.data.message, response.data.code);
                if (response.data.Message === 'Not all permissions are authorized.') {
                    apiError.code = ApiError_1.ApiError.NO_USER_PERMISSION; // user needs to grant access in app
                }
                if (response.data.Message === 'Request is not authorized.') {
                    apiError.code = ApiError_1.ApiError.NO_USER_PERMISSION; // user needs to grant access in app
                }
                return Promise.reject(apiError);
            }
            return Promise.resolve(response.data);
        }
        catch (e) {
            return Promise.reject(new ApiError_1.ApiError(e.message || 'Something went wrong.', e.code || ApiError_1.ApiError.ERROR));
        }
    }
    async createListItemAPI(listId, householdListItem) {
        const options = {
            endpoint: this.apiEndpoint,
            path: `/v2/householdlists/${listId}/items`,
            method: 'POST',
            json: householdListItem,
            permissionToken: this.apiAccessToken,
        };
        try {
            const response = await AlexaAPI_1.AlexaAPI.apiCall(options); // tslint:disable-line
            if (response.httpStatus === 403) {
                const apiError = new ApiError_1.ApiError(response.data.message, response.data.code);
                if (response.data.Message === 'Not all permissions are authorized.') {
                    apiError.code = ApiError_1.ApiError.NO_USER_PERMISSION; // user needs to grant access in app
                }
                if (response.data.Message === 'Request is not authorized.') {
                    apiError.code = ApiError_1.ApiError.NO_USER_PERMISSION; // user needs to grant access in app
                }
                return Promise.reject(apiError);
            }
            return Promise.resolve(response.data);
        }
        catch (e) {
            return Promise.reject(new ApiError_1.ApiError(e.message || 'Something went wrong.', e.code || ApiError_1.ApiError.ERROR));
        }
    }
    async updateListItemAPI(listId, householdListItem) {
        const options = {
            endpoint: this.apiEndpoint,
            path: `/v2/householdlists/${listId}/items/${householdListItem.id}`,
            method: 'PUT',
            json: householdListItem,
            permissionToken: this.apiAccessToken,
        };
        try {
            const response = await AlexaAPI_1.AlexaAPI.apiCall(options); // tslint:disable-line
            if (response.httpStatus === 403) {
                const apiError = new ApiError_1.ApiError(response.data.message, response.data.code);
                if (response.data.Message === 'Not all permissions are authorized.') {
                    apiError.code = ApiError_1.ApiError.NO_USER_PERMISSION; // user needs to grant access in app
                }
                if (response.data.Message === 'Request is not authorized.') {
                    apiError.code = ApiError_1.ApiError.NO_USER_PERMISSION; // user needs to grant access in app
                }
                return Promise.reject(apiError);
            }
            return Promise.resolve(response.data);
        }
        catch (e) {
            return Promise.reject(new ApiError_1.ApiError(e.message || 'Something went wrong.', e.code || ApiError_1.ApiError.ERROR));
        }
    }
}
exports.AlexaList = AlexaList;
AlexaList.ADDRESS = 'address';
AlexaList.COUNTRY_AND_POSTAL_CODE = 'address/countryAndPostalCode';
//# sourceMappingURL=AlexaList.js.map