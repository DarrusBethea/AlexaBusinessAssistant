import { Config as I18NextConfig } from 'jovo-cms-i18next';
import { BaseApp, ExtensibleConfig, Host } from 'jovo-core';
import { Config as JovoUserConfig, ContextConfig, MetaDataConfig } from './middleware/user/JovoUser';
import { ComponentConfig } from './middleware/Component';
import { ComponentPlugin } from './middleware/ComponentPlugin';
import { Config as RouterConfig } from './middleware/Router';
export declare class App extends BaseApp {
    config: Config;
    $config: Config;
    constructor(config?: Config);
    mergePluginConfiguration(): void;
    initConfig(): void;
    v1ConfigMigration(): void;
    init(): void;
    handle(host: Host): Promise<void>;
    /**
     *
     * @param {ComponentPlugin[]} components
     */
    useComponents(...components: ComponentPlugin[]): void;
    /**
     * @deprecated
     * @param config
     */
    setConfig(config: Config): void;
    /**
     * @deprecated
     * @param {boolean} val
     */
    enableLogging(val?: boolean): void;
    /**
     * @deprecated
     * @param {boolean} val
     */
    enableRequestLogging(val?: boolean): void;
    /**
     * @deprecated
     * @param {boolean} val
     */
    enableResponseLogging(val?: boolean): void;
    /**
     * @deprecated
     * @param {string | string[]} path
     */
    setRequestLoggingObjects(pathToObject: string | string[]): void;
    /**
     * @deprecated
     * @param {string | string[]} path
     */
    setResponseLoggingObjects(pathToObject: string | string[]): void;
    /**
     * @deprecated
     * @param {{[p: string]: string}} inputMap
     */
    setInputMap(inputMap: {
        [key: string]: string;
    }): void;
    /**
     * @deprecated
     * @param {UserMetaDataConfig} userMetaData
     */
    setUserMetaData(userMetaData: MetaDataConfig): void;
    /**
     * @deprecated
     * @param {UserContextConfig} userContext
     */
    setUserContext(userContext: ContextConfig): void;
    /**
     * @deprecated
     * @param {{[p: string]: string}} intentMap
     */
    setIntentMap(intentMap: {
        [key: string]: string;
    }): void;
    /**
     * @deprecated
     * @param {string[]} intentsToSkipUnhandled
     */
    setIntentsToSkipUnhandled(intentsToSkipUnhandled: string[]): void;
    /**
     * @deprecated
     * @param i18n
     */
    setI18n(i18n: any): void;
    /**
     * @deprecated
     * @param alexaSkillConfig
     */
    setAlexaSkill(alexaSkillConfig: any): void;
    /**
     * @deprecated
     * @param googleActionConfig
     */
    setGoogleAction(googleActionConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    setDb(dbConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    setDynamoDb(dbConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    setDynamoDbKey(dbConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    setLanguageResources(dbConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    setAnalytics(dbConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    addAnalytics(dbConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    addDashbotGoogleAction(dbConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    addDashbotAlexa(dbConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    addBotanalyticsGoogleAction(dbConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    addBotanalyticsAlexa(dbConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    addBespokenAnalytics(dbConfig: any): void;
    /**
     * @deprecated
     * @param dbConfig
     */
    addChatbaseAnalytics(dbConfig: any): void;
}
export interface LoggingConfig {
    request?: boolean;
    response?: boolean;
    requestObjects?: string[];
    responseObjects?: string[];
}
export interface Config extends ExtensibleConfig {
    v1?: {
        logging?: boolean;
        requestLogging?: boolean;
        responseLogging?: boolean;
        requestLoggingObjects?: string[];
        responseLoggingObjects?: string[];
        intentMap?: {
            [key: string]: string;
        };
        inputMap?: {
            [key: string]: string;
        };
        intentsToSkipUnhandled: string[];
        userMetaData?: MetaDataConfig;
        userContext?: ContextConfig;
        i18n: any;
    };
    keepSessionDataOnSessionEnded?: boolean;
    logging?: boolean | LoggingConfig;
    inputMap?: {
        [key: string]: string;
    };
    user?: JovoUserConfig | {
        [key: string]: any;
        metaData: boolean;
        context: boolean;
    };
    i18n?: I18NextConfig;
    db?: {
        [key: string]: any;
    };
    analytics?: {
        [key: string]: any;
    };
    platform?: {
        [key: string]: any;
    };
    cms?: {
        [key: string]: any;
    };
    nlu?: {
        [key: string]: any;
    };
    components?: {
        [key: string]: ComponentConfig;
    };
}
export interface Config {
    handlers?: any;
}
export interface Config extends RouterConfig {
}
