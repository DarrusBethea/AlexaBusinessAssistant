"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const jovo_cms_i18next_1 = require("jovo-cms-i18next");
const jovo_core_1 = require("jovo-core");
const jovo_db_filedb_1 = require("jovo-db-filedb");
const _cloneDeep = require("lodash.clonedeep");
const _get = require("lodash.get");
const _merge = require("lodash.merge");
const _set = require("lodash.set");
const path = require("path");
const JovoUser_1 = require("./middleware/user/JovoUser");
const ComponentPlugin_1 = require("./middleware/ComponentPlugin");
const Handler_1 = require("./middleware/Handler");
const BasicLogging_1 = require("./middleware/logging/BasicLogging");
const Router_1 = require("./middleware/Router");
if (process.argv.includes('--port')) {
    process.env.JOVO_PORT = process.argv[process.argv.indexOf('--port') + 1].trim();
}
if (process.argv.includes('--log-level')) {
    process.env.JOVO_LOG_LEVEL =
        jovo_core_1.Logger.getLogLevelFromString(process.argv[process.argv.indexOf('--log-level') + 1].trim()) + '';
}
if (process.argv.includes('--cwd')) {
    process.env.JOVO_CWD = process.argv[process.argv.indexOf('--cwd') + 1].trim();
}
if (process.argv.includes('--config')) {
    process.env.JOVO_CONFIG = process.argv[process.argv.indexOf('--config') + 1].trim();
}
if (process.argv.includes('--stage')) {
    process.env.JOVO_STAGE = process.argv[process.argv.indexOf('--stage') + 1].trim();
}
if (process.env.JOVO_PERFORMANCE_REPORT || process.argv.includes('--performance-report')) {
    const middlewareMap = {};
    const performanceReport = process.argv[process.argv.indexOf('--performance-report') + 1]
        ? process.argv[process.argv.indexOf('--performance-report') + 1].trim()
        : undefined;
    function getInstallLocation(stackStr, parent, middleware) {
        const stackArray = stackStr.split('\n');
        for (let i = 0; i < stackArray.length; i++) {
            const stackLine = stackArray[i];
            if (stackLine.includes('Middleware.use')) {
                const nextStackLine = stackArray[i + 1];
                let pluginName = 'Object.<anonymous>';
                if (!nextStackLine.includes(pluginName)) {
                    pluginName = nextStackLine.substring(nextStackLine.indexOf('at') + 3, nextStackLine.indexOf('.install'));
                }
                let location = ' - ' +
                    nextStackLine.substring(nextStackLine.indexOf('(') + 1, nextStackLine.indexOf(')'));
                // location = location.substring(process.cwd().length - 3);
                location = '';
                const middlewareFullKey = `${parent}.${middleware}`;
                if (!middlewareMap[middlewareFullKey]) {
                    middlewareMap[middlewareFullKey] = [];
                }
                middlewareMap[middlewareFullKey].push(`${pluginName}${location}`);
            }
        }
    }
    const oldMiddlewareUse = jovo_core_1.Middleware.prototype.use;
    jovo_core_1.Middleware.prototype.use = function (fns) {
        getInstallLocation(new Error().stack, this.parent.constructor.name, this.name);
        oldMiddlewareUse.call(this, fns);
        return this;
    };
    const oldBaseAppHandle = jovo_core_1.BaseApp.prototype.handle;
    jovo_core_1.BaseApp.prototype.handle = async function (host) {
        jovo_core_1.Log.info();
        jovo_core_1.Log.infoStart('Handle duration ');
        await oldBaseAppHandle.call(this, host);
        jovo_core_1.Log.infoEnd('Handle duration ');
    };
    const oldMiddlewareRun = jovo_core_1.Middleware.prototype.run;
    jovo_core_1.Middleware.prototype.run = async function (object, concurrent) {
        const start = process.hrtime();
        await oldMiddlewareRun.call(this, object, concurrent);
        const end = process.hrtime();
        // duration of the complete middleware process
        let duration = (end[1] - start[1]) / 1000 / 1000; // from nano to ms
        if (duration < 0) {
            duration = 0;
        }
        jovo_core_1.Log.writeToStreams(`\b→ ${this.parent.constructor.name}.${this.name}`, 2, false);
        if (duration <= 80) {
            // good value
            jovo_core_1.Log.green().info(`+${duration.toFixed(0)}ms`);
        }
        else if (duration > 80 && duration <= 200) {
            // ok value
            jovo_core_1.Log.yellow().info(`+${duration.toFixed(0)}ms`);
        }
        else if (duration > 200) {
            // bad value
            jovo_core_1.Log.red().info(`+${duration.toFixed(0)}ms`);
        }
        const middlewareFullKey = `${this.parent.constructor.name}.${this.name}`;
        if (middlewareMap[middlewareFullKey]) {
            middlewareMap[middlewareFullKey].forEach((impl) => {
                if (performanceReport === 'detailed') {
                    jovo_core_1.Log.dim().info(`↓ ${impl}`);
                }
            });
        }
    };
}
class App extends jovo_core_1.BaseApp {
    constructor(config) {
        super(config);
        this.config = {
            enabled: true,
            inputMap: {},
            intentMap: {},
            plugin: {},
        };
        this.$cms = {};
        if (config) {
            this.config = _merge(this.config, config);
        }
        jovo_core_1.Log.verbose();
        jovo_core_1.Log.verbose(jovo_core_1.Log.header(`Verbose information ${new Date().toISOString()}`));
        // sets specific cwd
        if (process.env.JOVO_CWD) {
            process.chdir(process.env.JOVO_CWD);
        }
        const pathToConfig = process.env.JOVO_CONFIG || path.join(process.cwd(), 'config.js');
        if (fs.existsSync(pathToConfig)) {
            const fileConfig = require(pathToConfig) || {};
            this.config = _merge(fileConfig, this.config);
            jovo_core_1.Log.verbose('Using ' + pathToConfig);
        }
        else {
            if (!config && (!process.env.NODE_ENV || process.env.NODE_ENV !== 'UNIT_TEST')) {
                jovo_core_1.Log.warn(`WARN: Couldn't find default config.js in your project.`);
                jovo_core_1.Log.warn(`WARN: Expected path: ${path.resolve(pathToConfig)}`);
            }
        }
        const stage = process.env.JOVO_STAGE || process.env.STAGE || process.env.NODE_ENV;
        if (stage) {
            jovo_core_1.Log.verbose('Stage: ' + stage);
        }
        if (jovo_core_1.Logger.isLogLevel(jovo_core_1.LogLevel.VERBOSE)) {
            const pathToPackageJsonInSrc = path.join(process.cwd(), 'package-lock.json');
            const pathToPackageJsonInProject = path.join(process.cwd(), '..', 'package-lock.json');
            let pathToPackageLockJson;
            if (fs.existsSync(pathToPackageJsonInSrc)) {
                pathToPackageLockJson = pathToPackageJsonInSrc;
            }
            if (fs.existsSync(pathToPackageJsonInProject)) {
                pathToPackageLockJson = pathToPackageJsonInProject;
            }
            try {
                const packageLockJson = require(pathToPackageLockJson); // tslint:disable-line
                const dependencies = Object.keys(packageLockJson.dependencies).filter((val) => val.startsWith('jovo-'));
                jovo_core_1.Log.verbose(jovo_core_1.Log.header('Jovo dependencies from package-lock.json', 'jovo-framework'));
                dependencies.forEach((jovoDependency) => {
                    jovo_core_1.Log.yellow().verbose(` ${jovoDependency}@${packageLockJson.dependencies[jovoDependency].version}`);
                });
            }
            catch (e) {
                //
            }
        }
        const pathToStageConfig = path.join(process.cwd(), 'config.' + stage + '.js');
        if (fs.existsSync(pathToStageConfig)) {
            const fileStageConfig = require(pathToStageConfig) || {};
            _merge(this.config, fileStageConfig);
            jovo_core_1.Log.verbose(`Merging stage specific config.js for stage ${stage} `);
        }
        else {
            if (stage) {
                jovo_core_1.Log.verbose(`No config file for stage ${stage}. `);
            }
        }
        this.mergePluginConfiguration();
        this.v1ConfigMigration();
        this.initConfig();
        jovo_core_1.Log.verbose(jovo_core_1.Log.header('App object initialized', 'jovo-framework'));
        this.$config = this.config;
        this.init();
    }
    mergePluginConfiguration() {
        _merge(this.config.plugin, this.config.platform);
        _merge(this.config.plugin, this.config.db);
        _merge(this.config.plugin, this.config.cms);
        _merge(this.config.plugin, this.config.analytics);
        _merge(this.config.plugin, this.config.nlu);
        _merge(this.config.plugin, this.config.components);
    }
    initConfig() {
        if (!this.config.plugin) {
            this.config.plugin = {};
        }
        // logging
        if (typeof this.config.logging !== 'undefined') {
            if (typeof this.config.logging === 'boolean') {
                this.config.plugin.BasicLogging = {
                    logging: this.config.logging,
                };
            }
            else {
                this.config.plugin.BasicLogging = this.config.logging;
            }
        }
        // user
        if (typeof this.config.user !== 'undefined') {
            this.config.plugin.JovoUser = this.config.user;
            if (this.config.user.metaData) {
                if (typeof this.config.user.metaData === 'boolean') {
                    if (!this.config.plugin.JovoUser.metaData) {
                        this.config.plugin.JovoUser.metaData = {};
                    }
                    this.config.plugin.JovoUser.metaData = {
                        enabled: this.config.user.metaData,
                    };
                }
                else {
                    this.config.plugin.JovoUser.metaData = this.config.user.metaData;
                }
            }
            if (this.config.user.context) {
                if (typeof this.config.user.context === 'boolean') {
                    if (!this.config.plugin.JovoUser.context) {
                        this.config.plugin.JovoUser.context = {};
                    }
                    this.config.plugin.JovoUser.context = {
                        enabled: this.config.user.context,
                    };
                }
                else {
                    this.config.plugin.JovoUser.context = this.config.user.context;
                }
            }
        }
        // inputMap
        // router (intentMap)
        if (this.config.intentMap) {
            if (!this.config.plugin.Router) {
                this.config.plugin.Router = {};
            }
            this.config.plugin.Router.intentMap = this.config.intentMap;
        }
        // router (intentsToSkipUnhandled)
        if (this.config.intentsToSkipUnhandled) {
            if (!this.config.plugin.Router) {
                this.config.plugin.Router = {};
            }
            this.config.plugin.Router.intentsToSkipUnhandled = this.config.intentsToSkipUnhandled;
        }
        // i18next
        if (this.config.i18n) {
            this.config.plugin.I18Next = this.config.i18n;
        }
    }
    v1ConfigMigration() {
        if (this.config.v1) {
            _set(this.config, 'plugin.JovoUser.implicitSave', _get(this.config, 'plugin.JovoUser.implicitSave') ||
                _get(this.config, 'v1.saveUserOnResponseEnabled'));
            _set(this.config, 'plugin.JovoUser.columnName', _get(this.config, 'plugin.JovoUser.columnName') || _get(this.config, 'v1.userDataCol'));
            _set(this.config, 'inputMap', this.config.inputMap || _get(this.config, 'v1.inputMap'));
            _set(this.config, 'plugin.Router.intentsToSkipUnhandled', _get(this.config, 'plugin.Router.intentsToSkipUnhandled') ||
                _get(this.config, 'v1.intentsToSkipUnhandled'));
            _set(this.config, 'plugin.Router.intentMap', this.config.intentMap || _get(this.config, 'v1.intentMap'));
            if (_get(this.config, 'v1.saveBeforeResponseEnabled')) {
                jovo_core_1.Log.info(`'saveBeforeResponseEnabled' is deprecated since 2.0 `);
            }
            if (_get(this.config, 'v1.db.type') === 'file') {
                _set(this.config, 'plugin.FileDb.pathToFile', _get(this.config, 'plugin.FileDb.pathToFile') ||
                    `./db/${_get(this.config, 'v1.db.localDbFilename')}.json`);
            }
            if (_get(this.config, 'v1.db.type') === 'dynamodb') {
                _set(this.config, 'plugin.DynamoDb.tableName', _get(this.config, 'plugin.DynamoDb.tableName') || _get(this.config, 'v1.db.tableName'));
                _set(this.config, 'plugin.DynamoDb.awsConfig', _get(this.config, 'plugin.DynamoDb.awsConfig') || _get(this.config, 'v1.db.awsConfig'));
            }
            _set(this.config, 'plugin.JovoUser.metaData', _get(this.config, 'plugin.JovoUser.metaData') || _get(this.config, 'v1.userMetaData'));
            _set(this.config, 'plugin.JovoUser.context', _get(this.config, 'plugin.JovoUser.context') || _get(this.config, 'v1.userContext'));
            _set(this.config, 'plugin.I18Next', _get(this.config, 'plugin.I18Next') || _get(this.config, 'v1.i18n'));
            _set(this.config, 'plugin.Alexa', _get(this.config, 'plugin.Alexa') || _get(this.config, 'v1.alexaSkill'));
            _set(this.config, 'plugin.GoogleAssistant', _get(this.config, 'plugin.GoogleAssistant') || _get(this.config, 'v1.googleAction'));
        }
    }
    init() {
        this.use(new BasicLogging_1.BasicLogging());
        this.use(new JovoUser_1.JovoUser());
        this.use(new jovo_cms_i18next_1.I18Next());
        this.use(new Router_1.Router());
        this.use(new Handler_1.Handler());
    }
    async handle(host) {
        if (host.headers && host.headers['jovo-test']) {
            let fileDb2Path = './../db/tests';
            if (this.$db && this.$db.config && this.$db.config.pathToFile) {
                // tslint:disable-line
                const dbPath = path.parse(this.$db.config.pathToFile); // tslint:disable-line
                fileDb2Path = dbPath.dir + '/tests';
            }
            if (host.headers['jovo-test'] === 'TestHost') {
                fileDb2Path = './db/tests';
            }
            this.use(new jovo_db_filedb_1.FileDb2({
                path: fileDb2Path,
            }));
        }
        await super.handle(host);
    }
    /**
     *
     * @param {ComponentPlugin[]} components
     */
    useComponents(...components) {
        /**
         * router needs to access $components object,
         * which gets initialized in `initializeComponents`
         */
        this.middleware('before.router').use(ComponentPlugin_1.ComponentPlugin.initializeComponents);
        this.middleware('platform.output').use(ComponentPlugin_1.ComponentPlugin.saveComponentSessionData);
        components.forEach((componentPlugin) => {
            this.middleware('setup').use(componentPlugin.setAsBaseComponent.bind(componentPlugin));
            componentPlugin.name = componentPlugin.name || componentPlugin.constructor.name;
            if (this.$config.components) {
                const componentAppConfig = _cloneDeep(this.$config.components[componentPlugin.name]); // config defined in project's main config.js file
                _merge(componentPlugin.config, componentAppConfig);
            }
            componentPlugin.install(this);
            /**
             * 1st layer components handler have to be set after the child component's handler were merged
             * currently they are merged in `after.setup`
             */
            this.middleware('before.request').use(componentPlugin.setHandler.bind(componentPlugin));
            this.$plugins.set(componentPlugin.name, componentPlugin);
            this.emit('use', componentPlugin);
            if (this.constructor.name === 'App') {
                jovo_core_1.Log.yellow().verbose(`Installed component: ${componentPlugin.name}`);
                jovo_core_1.Log.debug(`${JSON.stringify(componentPlugin.config || {}, null, '\t')}`);
                jovo_core_1.Log.debug();
            }
        });
    }
    /**
     * @deprecated
     * @param config
     */
    setConfig(config) {
        this.config = _merge(this.config, config);
        this.mergePluginConfiguration();
        this.initConfig();
        this.v1ConfigMigration();
        this.init();
    }
    /**
     * @deprecated
     * @param {boolean} val
     */
    enableLogging(val = true) {
        this.config.logging = val;
        if (this.$plugins.get('BasicLogging')) {
            this.$plugins.get('BasicLogging').config.logging = val;
            _set(this.config, 'plugin.BasicLogging.logging', val);
        }
        this.enableRequestLogging(val);
        this.enableResponseLogging(val);
    }
    /**
     * @deprecated
     * @param {boolean} val
     */
    enableRequestLogging(val = true) {
        if (this.$plugins.get('BasicLogging')) {
            this.$plugins.get('BasicLogging').config.request = val;
            _set(this.config, 'plugin.BasicLogging.requestLogging', val);
        }
        // this.config.request = val;
    }
    /**
     * @deprecated
     * @param {boolean} val
     */
    enableResponseLogging(val = true) {
        if (this.$plugins.get('BasicLogging')) {
            this.$plugins.get('BasicLogging').config.response = val;
            _set(this.config, 'plugin.BasicLogging.responseLogging', val);
        }
        // this.config.responseLogging = val;
    }
    /**
     * @deprecated
     * @param {string | string[]} path
     */
    setRequestLoggingObjects(pathToObject) {
        if (typeof pathToObject === 'string') {
            // this.config.requestLoggingObjects = [path];
        }
        else {
            // this.config.requestLoggingObjects = path;
        }
        if (this.$plugins.get('BasicLogging')) {
            // (this.$plugins.get('BasicLogging') as BasicLogging).config.requestLoggingObjects = this.config.requestLoggingObjects;
            // _set(this.config, 'plugin.BasicLogging.logging', this.config.requestLoggingObjects);
        }
    }
    /**
     * @deprecated
     * @param {string | string[]} path
     */
    setResponseLoggingObjects(pathToObject) {
        if (typeof pathToObject === 'string') {
            // this.config.responseLoggingObjects = [path];
        }
        else {
            // this.config.responseLoggingObjects = path;
        }
        if (this.$plugins.get('BasicLogging')) {
            // (this.$plugins.get('BasicLogging') as BasicLogging).config.responseLoggingObjects = this.config.responseLoggingObjects;
            // _set(this.config, 'plugin.BasicLogging.logging', this.config.responseLoggingObjects);
        }
    }
    /**
     * @deprecated
     * @param {{[p: string]: string}} inputMap
     */
    setInputMap(inputMap) {
        this.config.inputMap = inputMap;
    }
    /**
     * @deprecated
     * @param {UserMetaDataConfig} userMetaData
     */
    setUserMetaData(userMetaData) {
        if (!this.config.user) {
            this.config.user = {};
        }
        this.config.user.metaData = userMetaData;
    }
    /**
     * @deprecated
     * @param {UserContextConfig} userContext
     */
    setUserContext(userContext) {
        if (!this.config.user) {
            this.config.user = {};
        }
        this.config.user.context = userContext;
    }
    /**
     * @deprecated
     * @param {{[p: string]: string}} intentMap
     */
    setIntentMap(intentMap) {
        this.config.intentMap = intentMap;
        if (this.$plugins.get('Router')) {
            this.$plugins.get('Router').config.intentMap = this.config.intentMap;
            _set(this.config, 'plugin.Router.intentMap', this.config.intentMap);
        }
    }
    /**
     * @deprecated
     * @param {string[]} intentsToSkipUnhandled
     */
    setIntentsToSkipUnhandled(intentsToSkipUnhandled) {
        if (this.$plugins.get('Router')) {
            this.$plugins.get('Router').config.intentsToSkipUnhandled = intentsToSkipUnhandled;
            _set(this.config, 'plugin.Router.intentsToSkipUnhandled', intentsToSkipUnhandled);
        }
    }
    /**
     * @deprecated
     * @param i18n
     */
    setI18n(i18n) {
        // tslint:disable-line
        if (this.$plugins.get('I18Next')) {
            this.$plugins.get('I18Next').config = i18n;
            _set(this.config, 'plugin.I18Next', i18n);
        }
    }
    /**
     * @deprecated
     * @param alexaSkillConfig
     */
    setAlexaSkill(alexaSkillConfig) {
        // tslint:disable-line
        if (this.$plugins.get('Alexa')) {
            _set(this.$plugins.get('Alexa'), 'config', alexaSkillConfig);
        }
    }
    /**
     * @deprecated
     * @param googleActionConfig
     */
    setGoogleAction(googleActionConfig) {
        // tslint:disable-line
        if (this.$plugins.get('GoogleAssistant')) {
            _set(this.$plugins.get('GoogleAssistant'), 'config', googleActionConfig);
        }
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    setDb(dbConfig) {
        // tslint:disable-line
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    setDynamoDb(dbConfig) {
        // tslint:disable-line
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    setDynamoDbKey(dbConfig) {
        // tslint:disable-line
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    setLanguageResources(dbConfig) {
        // tslint:disable-line
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    setAnalytics(dbConfig) {
        // tslint:disable-line
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    addAnalytics(dbConfig) {
        // tslint:disable-line
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    addDashbotGoogleAction(dbConfig) {
        // tslint:disable-line
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    addDashbotAlexa(dbConfig) {
        // tslint:disable-line
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    addBotanalyticsGoogleAction(dbConfig) {
        // tslint:disable-line
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    addBotanalyticsAlexa(dbConfig) {
        // tslint:disable-line
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    addBespokenAnalytics(dbConfig) {
        // tslint:disable-line
    }
    /**
     * @deprecated
     * @param dbConfig
     */
    addChatbaseAnalytics(dbConfig) {
        // tslint:disable-line
    }
}
exports.App = App;
//# sourceMappingURL=App.js.map