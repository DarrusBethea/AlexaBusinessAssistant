"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _sample = require("lodash.sample");
const jovo_core_1 = require("jovo-core");
class AlexaSpeechBuilder extends jovo_core_1.SpeechBuilder {
    constructor(alexaSkill) {
        super(alexaSkill);
    }
    /**
     * Adds text with language
     * @param {string} language
     * @param {string | string[]} text
     * @param {boolean} condition
     * @param {number} probability
     * @returns {SpeechBuilder}
     */
    addLangText(language, text, condition, probability) {
        if (Array.isArray(text)) {
            return this.addText(`<lang xml:lang="${language}">${_sample(text)}</lang>`, condition, probability);
        }
        return this.addText(`<lang xml:lang="${language}">${text}</lang>`, condition, probability);
    }
    /**
     * Adds text with polly
     * @param {string} pollyName
     * @param {string | string[]} text
     * @param {boolean} condition
     * @param {number} probability
     * @returns {SpeechBuilder}
     */
    addTextWithPolly(pollyName, text, condition, probability) {
        const surroundSsml = {
            voice: {
                name: pollyName,
            },
        };
        return this.addText(text, condition, probability, surroundSsml);
    }
    /**
     * Overrides addText and adds polly voice tags if a polly voice has been set.
     * @param {string | string[]} text
     * @param {boolean} condition
     * @param {number} probability
     * @returns {this}
     */
    addText(text, condition, probability, surroundSsml) {
        if (AlexaSpeechBuilder.pollyVoice) {
            if (!surroundSsml) {
                surroundSsml = {};
            }
            surroundSsml.voice = {
                name: AlexaSpeechBuilder.pollyVoice,
            };
        }
        return super.addText(text, condition, probability, surroundSsml);
    }
    addEmotion(name, intensity, text, condition, probability, surroundSsml = {}) {
        surroundSsml['amazon:emotion'] = { name, intensity };
        return this.addText(text, condition, probability, surroundSsml);
    }
}
exports.AlexaSpeechBuilder = AlexaSpeechBuilder;
//# sourceMappingURL=AlexaSpeechBuilder.js.map